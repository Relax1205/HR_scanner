const fetch = require('node-fetch'); // npm install node-fetch@2
require('dotenv').config();
const express = require('express');
const fileUpload = require('express-fileupload');
const cors = require('cors');
const pdf = require('pdf-parse');
const mammoth = require('mammoth');
const path = require('path');
const fs = require('fs');

const app = express();

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

app.use(cors());

app.use(fileUpload({
  limits: { fileSize: 10 * 1024 * 1024 },
  abortOnLimit: true,
  useTempFiles: true,
  tempFileDir: path.join(__dirname, 'temp')
}));

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
console.log('Loaded API Key:', OPENROUTER_API_KEY ? (OPENROUTER_API_KEY.startsWith('sk-') ? '‚úÖ Valid format' : '‚ö†Ô∏è Invalid format (should start with "sk-")') : '‚ùå NOT LOADED');

async function askOpenRouter(prompt) {
  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", { // ‚Üê –£–ë–†–ê–ù –õ–ò–®–ù–ò–ô –ü–†–û–ë–ï–õ –í URL
    method: "POST",
    headers: {
      "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
      "HTTP-Referer": "http://localhost:3001",
      "X-Title": "HR Scanner",
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      "model": "deepseek/deepseek-chat-v3.1:free", // ‚Üê DEEPSEEK v3.1
      "messages": [
        {
          "role": "system",
          "content": "–¢—ã ‚Äî HR-–±–æ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
        },
        {
          "role": "user",
          "content": prompt
        }
      ]
    })
  });

  const text = await response.text();

  if (!response.ok) {
    console.error('‚ùå OpenRouter API Error:', text);
    throw new Error(`OpenRouter error: ${response.status} ${text}`);
  }

  try {
    return JSON.parse(text);
  } catch (e) {
    console.error('‚ùå OpenRouter returned non-JSON:', text);
    throw new Error('OpenRouter did not return JSON. See server log for details.');
  }
}

async function extractText(file) {
  try {
    const tempPath = path.join(__dirname, 'temp', `${Date.now()}_${file.name}`);
    await file.mv(tempPath);

    let textContent = '';

    if (file.mimetype === 'application/pdf') {
      const dataBuffer = fs.readFileSync(tempPath);
      const data = await pdf(dataBuffer);
      textContent = data.text;
    } else if (file.mimetype.includes('msword') || file.mimetype.includes('wordprocessingml')) {
      const result = await mammoth.extractRawText({ path: tempPath });
      textContent = result.value;
    } else {
      throw new Error('Unsupported file type. Only PDF and DOC/DOCX are allowed.');
    }

    fs.unlinkSync(tempPath); // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    return textContent;

  } catch (err) {
    console.error('‚ùå Detailed extraction error:', err);
    throw new Error(`Failed to extract text: ${err.message}`);
  }
}

app.post('/api/analyze', async (req, res) => {
  try {
    console.log('‚û°Ô∏è POST /api/analyze called');

    if (!req.files?.resume) {
      console.log('‚ùå No file uploaded');
      return res.status(400).json({ error: 'No file uploaded' });
    }

    // –ñ—ë—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if (!OPENROUTER_API_KEY) {
      return res.status(500).json({ error: '‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env' });
    }
    if (OPENROUTER_API_KEY.trim() === '') {
      return res.status(500).json({ error: '‚ùå OPENROUTER_API_KEY –ø—É—Å—Ç–æ–π (–ø—Ä–æ–±–µ–ª—ã)' });
    }
    if (OPENROUTER_API_KEY === 'your-api-key-here') {
      return res.status(500).json({ error: '‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á, –∞ –Ω–µ "your-api-key-here"' });
    }
    if (!OPENROUTER_API_KEY.startsWith('sk-')) {
      return res.status(500).json({ error: '‚ùå –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "sk-"' });
    }

    const resume = req.files.resume;
    const job = req.body.job || 'analyst';
    console.log(`üìÑ File received: ${resume.name}, Job: ${job}`);

    const textContent = await extractText(resume);
    if (!textContent) {
      throw new Error('No text content extracted');
    }

    let shortResume = textContent.substring(0, 2000);

    const prompt = `–¢—ã ‚Äî HR-–±–æ—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é ${job}. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "name": "<–∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞>",
  "job": "${job}",
  "persent": <–ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ –≤–∞–∫–∞–Ω—Å–∏–∏>,
  "skills": [ {"skill": "<–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞>"} ... ],
  "experience": "<–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ null>",
  "education": "<–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ null>"
}
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown-–æ–±—ë—Ä—Ç–∫—É (–Ω–∏–∫–∞–∫–∏—Ö —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫, –Ω–∏–∫–∞–∫–∏—Ö \`\`\`json –∏ \`\`\`), —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏–º—è, –æ–ø—ã—Ç –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚Äî –ø–∏—à–∏ null –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
–†–µ–∑—é–º–µ:
${shortResume}`;

    console.log('üß† Sending prompt to DeepSeek...');
    const openRouterResult = await askOpenRouter(prompt);

    let content = openRouterResult.choices?.[0]?.message?.content;
    if (!content) {
      throw new Error('No content returned from DeepSeek');
    }

    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç markdown-–æ–±—ë—Ä—Ç–æ–∫ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    content = content.replace(/```json|```/g, '').trim();

    let result;
    try {
      result = JSON.parse(content);
    } catch (e) {
      console.error('‚ùå DeepSeek –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON:', content);
      throw new Error('DeepSeek –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ' + content);
    }

    console.log('‚úÖ Parsed result:', result);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ data.json
    const outPath = '/data/data.json';
    fs.mkdirSync(path.dirname(outPath), { recursive: true });
    fs.writeFileSync(outPath, JSON.stringify(result, null, 2), 'utf-8');
    console.log('üíæ Result saved to', outPath);

    res.json(result);
    console.log('‚úÖ Response sent to client');

  } catch (error) {
    console.error('üí• Full error:', error);
    res.status(500).json({ error: error.message });
  }
});

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É temp, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(path.join(__dirname, 'temp'))) {
  fs.mkdirSync(path.join(__dirname, 'temp'));
}

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
});

app.get('/', (req, res) => {
  res.send('HR Scanner backend is running!');
});