name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'src/main/resources/static/js/package-lock.json'

      # 🔴 Run backend unit and integration tests
      - name: Run Backend Tests
        run: mvn test

      # 🟢 Build backend JAR (skip tests to avoid double-run)
      - name: Build Backend
        run: mvn package -DskipTests

      # 🔴 Install frontend dependencies and run tests
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./src/main/resources/static/js

      - name: Run Frontend Tests
        run: npm test
        working-directory: ./src/main/resources/static/js

      # 🟢 Build frontend assets (if needed for production)
      - name: Build Frontend (if required)
        run: npm run build || echo "No build script defined — skipping"
        working-directory: ./src/main/resources/static/js

      # 🔤 Normalize owner/repo name to lowercase for GHCR compatibility
      - name: Set lower case owner and repo name
        id: string
        run: |
          echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "REPO_LC=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # 🔑 Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 🐳 Build and push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ghcr.io/${{ steps.string.outputs.OWNER_LC }}/${{ steps.string.outputs.REPO_LC }}/backend:${{ github.sha }}

      # 🖥️ Build and push frontend Docker image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: ghcr.io/${{ steps.string.outputs.OWNER_LC }}/${{ steps.string.outputs.REPO_LC }}/frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 🔒 Ensure secrets are set before triggering deploy
      - name: Fail if backend deploy hook is missing
        if: ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND == '' }}
        run: |
          echo "❌ Secret RENDER_DEPLOY_HOOK_BACKEND is not set in repository secrets!"
          echo "Go to: Settings → Secrets and variables → Actions → Repository secrets"
          exit 1

      - name: Fail if frontend deploy hook is missing
        if: ${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND == '' }}
        run: |
          echo "❌ Secret RENDER_DEPLOY_HOOK_FRONTEND is not set in repository secrets!"
          echo "Go to: Settings → Secrets and variables → Actions → Repository secrets"
          exit 1

      # 🚀 Trigger deployment on Render
      - name: Trigger Render Deploy for Backend
        run: curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}"

      - name: Trigger Render Deploy for Frontend
        run: curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_FRONTEND }}"