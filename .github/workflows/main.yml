name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'src/main/resources/static/js/package-lock.json'

      - name: Build and Test Backend
        run: mvn clean install

      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./src/main/resources/static/js

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile.backend
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile.frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    # This job is a placeholder for your deployment strategy.
    # It will only run if the build-and-push job succeeds.
    # You need to configure secrets in your repository for this to work.
    # Example for deploying to a server via SSH:
    # env:
    #   SSH_USER: ${{ secrets.SSH_USER }}
    #   SSH_HOST: ${{ secrets.SSH_HOST }}
    #   SSH_KEY: ${{ secrets.SSH_KEY }}
    steps:
      - name: Deploy to production server
        run: |
          echo "Deployment step needs to be configured."
          echo "For example, you could SSH into your server and run docker-compose."
          # Example commands:
          # ssh -o StrictHostKeyChecking=no -i $SSH_KEY $SSH_USER@$SSH_HOST '\
          #   cd /path/to/your/project && \
          #   docker-compose pull && \
          #   docker-compose up -d \
          # '
